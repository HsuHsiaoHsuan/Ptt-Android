plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.parcelize"
}

android {
    compileSdkVersion buildConfig.compileSDK
    buildToolsVersion buildConfig.buildTool
    defaultConfig {
        applicationId buildConfig.appID
        minSdkVersion buildConfig.minSDK
        targetSdkVersion buildConfig.targetSDK
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName
        buildConfigField "String", "APIDomain", "\"${apiDomain()}\""
        testInstrumentationRunner buildConfig.runner
        multiDexEnabled true
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a' , 'x86', 'x86_64'
        }
    }

    buildTypes {

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true
            zipAlignEnabled true
            multiDexEnabled = true
        }

        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled false
            multiDexEnabled = true
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility = buildConfig.jdk
        targetCompatibility = buildConfig.jdk
    }
    buildFeatures {
        viewBinding true
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
}

def apiDomain() {
    def path = getRootProject().file('api.properties')
    if (path.canRead()) {
        def props = new Properties()
        props.load(new FileInputStream(path))
        if (props != null) {
            return props['api_domain']
        } else {
            println 'some entries in \\\'api.properties\\\' not found!'
        }
    } else {
        println 'Use CI Variables'
        return System.getenv('api_domain')
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // AndroidX
    implementation deps.androidX.appcompat
    implementation deps.androidX.browser
    implementation deps.androidX.constraintLayout
    implementation deps.androidX.legacy
    implementation deps.androidX.lifecycle.extensions
    implementation deps.androidX.lifecycle.compiler
    implementation deps.androidX.lifecycle.viewmodelKTX
    implementation deps.androidX.lifecycle.runtime
    implementation deps.androidX.localBroadcastManager
    implementation deps.androidX.multidex
    implementation deps.androidX.swipeRefreshLayout
    implementation deps.androidX.navigation.fragment
    implementation deps.androidX.navigation.ui

    // Coil
    implementation deps.coil

    // Google
    implementation deps.google.material
    implementation deps.google.gson

    // Jsoup
    implementation deps.jsoup

    implementation deps.koin.android
    implementation deps.koin.scope
    implementation deps.koin.viewModel
    implementation deps.koin.fragment

    // Kotlin
    implementation deps.kotlin.stdlib.jdk8
    implementation deps.kotlin.coroutines.core
    implementation deps.kotlin.coroutines.android
    // Square
    implementation deps.square.okhttp
    implementation deps.square.log
    implementation deps.square.okio
    implementation deps.square.retrofit.core
    implementation deps.square.retrofit.gsonConverter

    coreLibraryDesugaring deps.desugar

    testImplementation deps.google.truth
    testImplementation deps.junit
    testImplementation deps.mockK.core
    testImplementation deps.androidX.arch
    testImplementation deps.kotlin.coroutines.test

    androidTestImplementation deps.androidX.test.ext.junit
    androidTestImplementation deps.androidX.test.ext.espresso
    androidTestImplementation deps.google.truth
    androidTestImplementation deps.mockK.android
    androidTestImplementation deps.androidX.arch
    androidTestImplementation deps.kotlin.coroutines.test

    debugImplementation deps.square.leakcanary

    // solved AndroidX conflict: Duplicate class guava listenablefuture
    // seeï¼šhttps://stackoverflow.com/questions/60472354/duplicate-class-com-google-common-util-concurrent-listenablefuture-found-in-modu
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
}
